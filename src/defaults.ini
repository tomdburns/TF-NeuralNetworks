# All of the default parameters for the code are found in this file
# -----------------------------------------------------------------------
# ___________                             ___________.__                 
# \__    ___/___   ____   ________________\_   _____/|  |   ______  _  __
#   |    |_/ __ \ /    \ /  ___/  _ \_  __ \    __)  |  |  /  _ \ \/ \/ /
#   |    |\  ___/|   |  \\___ (  <_> )  | \/     \   |  |_(  <_> )     / 
#   |____| \___  >___|  /____  >____/|__|  \___  /   |____/\____/ \/\_/  
#              \/     \/     \/                \/                        
# -----------------------------------------------------------------------
# Default options for my tensorflow program                 Version 0.0.1
# -----------------------------------------------------------------------

# X-columns from the input file
x_cols = b0_c, d0_c, q1_c, q2_c, U1_c, U2_c, b0_n, d0_n, q1_n, q2_n, 
         U1_n, U2_n, StructuredDensity, InletTemp, tads, tblow, 
         tevac, Pint, Plow, v0

# Y-columns in for the input file
y_cols = Purity

# The default of this tensorflow is to attempt regression fittings
# but it is also capable of classification
classification = False

# Declare the non-linear transformation you wish to use on your data
# Options: sigmoid, tanh, relu
non-linear = relu

# Declare the optimizer you wish to use for your neural network
# Options: GradientDescent, Adam
# (Not implemented)
optimizer = GradientDescent

# Shuffles the initial data frame ensuring that the data set is
# randomized prior to any operations
shuffle = True

# Determines whether or not you scale your input data
# If set to True the data will be scaled
x_scale = False

# Determines whether or not you scale your output data
# If set to True the data will be scaled
y_scale = False

# Determines the fraction of the data set that will be used for
# validation. A value of 0.1 implies that 10% of the set will be
# used in the testing with 90% used for training
test_ratio = 0.1

# Set the number of Hidden layers in the ANN
layers = 5

# Set the values for each layer - size of the vector
# after the transformation -> A value is needed for
# every layer in the ANN
vector_size = 20, 5, 15, 10, 1

# Set the learning rate for model training
# (default: 0.00000000001)
learning_rate = 0.0000000001

# Set the number of EPOCHS
# OR how many cycles are you allowing the optimizer
# to perform to minimize the cost
num_epochs = 100000

# Set the minibatch size
# How many minibatches will be used to train
# the ANN
minibatch_size = 200

# Print the result of the cost function
# If set to true the code will periodically print the
# results of the cost function at intervals defined
# by the print_rate option
print_cost = True

# Set the rate for printing of the cost
# Setting this to 100 means that the cost will be printed
# every 100 epochs
print_rate = 100

# Plot the cost as a function of epoch and pushes it
# to an X-window
display_cost = False

# This option determines how many cost variables will be
# saved. Setting this value to 5 means that the cost
# will be saved every 5 epochs
save_rate = 5

# Random seed
# Controls the randomization of the minimatches
seed = 3

# Silence the output of the code. Will not print any info to the screen
silent = False

# Decide whether there is a live update to the epoch value
live = True

# Use a convergence criteria to stop the fitting early
conv = True

# Minimum number of epochs before a convergence check on the cost 
# is performed
conv_min = 2000

# Set the tolerance for the convergence check of the cost function.
# A value of 0.1 means that it will be considered converged if
# the standard deviation falls below 10% of the mean
conv_tol = 0.001

# Set how often the convergence check is performed
conv_freq = 100

# Set the number of points considered during the convergence check
# Example: if set to 5, the convergence will only look at the last 5
#          saved convergence values
conv_incl = 50
